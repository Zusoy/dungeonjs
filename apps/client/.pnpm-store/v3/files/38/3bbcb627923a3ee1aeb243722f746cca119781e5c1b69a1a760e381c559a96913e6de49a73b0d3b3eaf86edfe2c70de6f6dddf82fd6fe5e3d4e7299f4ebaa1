import { Intersection, Matrix4, Mesh, Object3D, Sphere, Vector2Tuple } from 'three';
import { ClippingRect } from '../clipping.js';
import { Signal } from '@preact/signals-core';
import { OrderInfo } from '../order.js';
import { Object3DRef } from '../context.js';
import { Initializers } from '../internals.js';
export type AllowedPointerEventsType = 'all' | ((poinerId: number, pointerType: string, pointerState: unknown) => boolean) | {
    allow: string | Array<string>;
} | {
    deny: string | Array<string>;
};
declare module 'three' {
    interface Object3D extends PointerEventsProperties {
        spherecast?(sphere: Sphere, intersects: Array<Intersection>): void;
        intersectChildren?: boolean;
        interactableDescendants?: Array<Object3D>;
        ancestorsHaveListeners?: boolean;
        defaultPointerEvents?: PointerEventsProperties['pointerEvents'];
    }
}
export type PointerEventsProperties = {
    pointerEvents?: 'none' | 'auto' | 'listener';
    pointerEventsType?: AllowedPointerEventsType;
    pointerEventsOrder?: number;
};
export declare function makePanelSpherecast(rootObjectMatrixWorld: Matrix4, globalSphereWithLocalScale: Sphere, globalMatrixSignal: Signal<Matrix4 | undefined>, object: Object3D): Exclude<Mesh['spherecast'], undefined>;
export declare function makePanelRaycast(raycast: Mesh['raycast'], rootObjectMatrixWorld: Matrix4, globalSphereWithLocalScale: Sphere, globalMatrixSignal: Signal<Matrix4 | undefined>, object: Object3D): Mesh['raycast'];
export declare function isInteractionPanel(object: Object3D): object is Object3D<import("three").Object3DEventMap> & Record<"isInteractionPanel", unknown>;
export declare function computedBoundingSphere(pixelSize: Signal<number>, globalMatrixSignal: Signal<Matrix4 | undefined>, size: Signal<Vector2Tuple | undefined>, initializers: Initializers): Sphere;
/**
 * clips the sphere / raycast
 * also marks the mesh as a interaction panel
 */
export declare function makeClippedCast<T extends Mesh['raycast'] | Exclude<Mesh['spherecast'], undefined>>(mesh: Mesh, fn: T, rootObjectRef: Object3DRef, clippingRect: Signal<ClippingRect | undefined> | undefined, orderInfoSignal: Signal<OrderInfo | undefined>): (raycaster: Parameters<T>[0], intersects: Parameters<T>[1]) => void;
