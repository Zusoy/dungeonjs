import { Signal } from '@preact/signals-core';
import { Object3DRef, RootContext } from '../context.js';
import { FlexNode, YogaProperties } from '../flex/index.js';
import { LayoutListeners, ScrollListeners } from '../listeners.js';
import { PanelProperties } from '../panel/instanced-panel.js';
import { PanelGroupProperties } from '../panel/instanced-panel-group.js';
import { WithAllAliases } from '../properties/alias.js';
import { AllOptionalProperties, WithClasses, WithReactive } from '../properties/default.js';
import { MergedProperties } from '../properties/merged.js';
import { ScrollbarProperties } from '../scroll.js';
import { TransformProperties } from '../transform.js';
import { Initializers, alignmentXMap, alignmentYMap } from '../utils.js';
import { UpdateMatrixWorldProperties, VisibilityProperties, WithConditionals } from './utils.js';
import { Camera, Matrix4, Vector2Tuple, WebGLRenderer } from 'three';
import { PointerEventsProperties } from '../panel/index.js';
import { EventHandlers, ThreeEventMap } from '../events.js';
export type InheritableRootProperties = WithClasses<WithConditionals<WithAllAliases<WithReactive<YogaProperties & TransformProperties & PanelProperties & ScrollbarProperties & PanelGroupProperties & {
    sizeX?: number;
    sizeY?: number;
    anchorX?: keyof typeof alignmentXMap;
    anchorY?: keyof typeof alignmentYMap;
} & VisibilityProperties & UpdateMatrixWorldProperties & PointerEventsProperties>>>>;
export type RootProperties<EM extends ThreeEventMap = ThreeEventMap> = InheritableRootProperties & LayoutListeners & ScrollListeners & EventHandlers<EM>;
export declare const DEFAULT_PIXEL_SIZE = 0.01;
export declare function createRoot<EM extends ThreeEventMap = ThreeEventMap>(pixelSize: Signal<number>, style: Signal<RootProperties<EM> | undefined>, properties: Signal<RootProperties<EM> | undefined>, defaultProperties: Signal<AllOptionalProperties | undefined>, object: Object3DRef, childrenContainer: Object3DRef, getCamera: () => Camera, renderer: WebGLRenderer, onFrameSet: Set<(delta: number) => void>, requestRender?: () => void, requestFrame?: () => void): {
    size: Signal<Vector2Tuple | undefined>;
    relativeCenter: Signal<Vector2Tuple | undefined>;
    borderInset: Signal<import("../internals.js").Inset | undefined>;
    overflow: Signal<import("yoga-layout/load").Overflow>;
    displayed: Signal<boolean>;
    scrollable: Signal<[boolean, boolean]>;
    paddingInset: Signal<import("../internals.js").Inset | undefined>;
    maxScrollPosition: Signal<[(number | undefined)?, (number | undefined)?]>;
} & {
    ancestorsHaveListeners: import("@preact/signals-core").ReadonlySignal<boolean>;
    defaultProperties: {
        pointerEvents: Signal<"auto" | "none" | "listener" | undefined>;
        pointerEventsOrder: Signal<number | undefined>;
        pointerEventsType: Signal<import("../internals.js").AllowedPointerEventsType | undefined>;
        renderOrder: Signal<number>;
        depthTest: Signal<boolean>;
        depthWrite: Signal<boolean>;
    };
    globalMatrix: import("@preact/signals-core").ReadonlySignal<Matrix4 | undefined>;
    isVisible: import("@preact/signals-core").ReadonlySignal<boolean>;
    scrollPosition: Signal<Vector2Tuple>;
    mergedProperties: import("@preact/signals-core").ReadonlySignal<MergedProperties>;
    anyAncestorScrollable: Signal<[boolean, boolean]>;
    clippingRect: Signal<import("../clipping.js").ClippingRect | undefined>;
    childrenMatrix: import("@preact/signals-core").ReadonlySignal<Matrix4 | undefined>;
    node: Signal<FlexNode | undefined>;
    orderInfo: Signal<import("../order.js").OrderInfo | undefined>;
    initializers: Initializers;
    interactionPanel: import("three").Mesh<import("three").BufferGeometry<import("three").NormalBufferAttributes>, import("three").Material | import("three").Material[], import("three").Object3DEventMap>;
    handlers: import("@preact/signals-core").ReadonlySignal<EventHandlers>;
    root: RootContext;
};
