import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useEffect, useMemo, useRef } from 'react';
import { useParent } from './context.js';
import { AddHandlers, usePropertySignals } from './utils.js';
import { createInput, initialize, unsubscribeSubscriptions, } from '@pmndrs/uikit/internals';
import { useComponentInternals } from './ref.js';
import { signal } from '@preact/signals-core';
import { useFontFamilies } from './font.js';
export const Input = forwardRef((properties, ref) => {
    const parent = useParent();
    const outerRef = useRef(null);
    const propertySignals = usePropertySignals(properties);
    const fontFamilies = useMemo(() => signal(undefined), []);
    fontFamilies.value = useFontFamilies();
    //allows to not get a eslint error because of dependencies (we deliberatly never update this ref)
    const internals = useMemo(() => createInput(parent, fontFamilies, propertySignals.style, propertySignals.properties, propertySignals.default, outerRef), 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []);
    internals.interactionPanel.name = properties.name ?? '';
    useEffect(() => {
        const subscriptions = [];
        initialize(internals.initializers, subscriptions);
        return () => unsubscribeSubscriptions(subscriptions);
    }, [internals]);
    useComponentInternals(ref, parent.root.pixelSize, propertySignals.style, internals, internals.interactionPanel, useMemo(() => ({
        focus: internals.focus,
        blur: internals.blur,
        current: internals.valueSignal,
        element: internals.element,
    }), [internals.focus, internals.blur, internals.valueSignal, internals.element]));
    return (_jsx(AddHandlers, { handlers: internals.handlers, ref: outerRef, children: _jsx("primitive", { object: internals.interactionPanel }) }));
});
