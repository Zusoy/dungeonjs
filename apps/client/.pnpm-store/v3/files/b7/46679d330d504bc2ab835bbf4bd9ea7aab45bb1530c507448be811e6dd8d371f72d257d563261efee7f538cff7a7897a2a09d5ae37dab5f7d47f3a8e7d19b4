import { createFlexNodeState } from '../flex/node.js';
import { createHoverPropertyTransformers, setupCursorCleanup } from '../hover.js';
import { computedIsClipped } from '../clipping.js';
import { createInstancedPanel } from '../panel/instanced-panel.js';
import { applyTransform, computedTransformMatrix } from '../transform.js';
import { createResponsivePropertyTransformers } from '../responsive.js';
import { ElementType, computedOrderInfo } from '../order.js';
import { createActivePropertyTransfomers } from '../active.js';
import { effect, signal } from '@preact/signals-core';
import { computedGlobalMatrix, computedHandlers, computedIsVisible, computedMergedProperties, createNode, setupPointerEvents, setupMatrixWorldUpdate, } from './utils.js';
import { setupLayoutListeners, setupClippedListeners } from '../listeners.js';
import { computedPanelGroupDependencies } from '../panel/instanced-panel-group.js';
import { createInteractionPanel, getDefaultPanelMaterialConfig } from '../panel/index.js';
import { computedFont, computedGylphGroupDependencies, createInstancedText, } from '../text/index.js';
import { darkPropertyTransformers } from '../dark.js';
import { computeAncestorsHaveListeners, computedInheritableProperty, } from '../internals.js';
export function createText(parentCtx, textSignal, fontFamilies, style, properties, defaultProperties, object) {
    const hoveredSignal = signal([]);
    const activeSignal = signal([]);
    const initializers = [];
    setupCursorCleanup(hoveredSignal, initializers);
    const mergedProperties = computedMergedProperties(style, properties, defaultProperties, {
        ...darkPropertyTransformers,
        ...createResponsivePropertyTransformers(parentCtx.root.size),
        ...createHoverPropertyTransformers(hoveredSignal),
        ...createActivePropertyTransfomers(activeSignal),
    });
    const nodeSignal = signal(undefined);
    const flexState = createFlexNodeState();
    createNode(nodeSignal, flexState, parentCtx, mergedProperties, object, false, initializers);
    const transformMatrix = computedTransformMatrix(mergedProperties, flexState, parentCtx.root.pixelSize);
    applyTransform(parentCtx.root, object, transformMatrix, initializers);
    const globalMatrix = computedGlobalMatrix(parentCtx.childrenMatrix, transformMatrix);
    const isClipped = computedIsClipped(parentCtx.clippingRect, globalMatrix, flexState.size, parentCtx.root.pixelSize);
    const isVisible = computedIsVisible(flexState, isClipped, mergedProperties);
    const groupDeps = computedPanelGroupDependencies(mergedProperties);
    const backgroundOrderInfo = computedOrderInfo(mergedProperties, ElementType.Panel, groupDeps, parentCtx.orderInfo);
    initializers.push((subscriptions) => createInstancedPanel(mergedProperties, backgroundOrderInfo, groupDeps, parentCtx.root.panelGroupManager, globalMatrix, flexState.size, undefined, flexState.borderInset, parentCtx.clippingRect, isVisible, getDefaultPanelMaterialConfig(), subscriptions));
    const fontSignal = computedFont(mergedProperties, fontFamilies, parentCtx.root.renderer, initializers);
    const orderInfo = computedOrderInfo(undefined, ElementType.Text, computedGylphGroupDependencies(fontSignal), backgroundOrderInfo);
    const customLayouting = createInstancedText(mergedProperties, textSignal, globalMatrix, nodeSignal, flexState, isVisible, parentCtx.clippingRect, orderInfo, fontSignal, parentCtx.root.gylphGroupManager, undefined, undefined, undefined, undefined, initializers, 'break-word');
    initializers.push(() => effect(() => nodeSignal.value?.setCustomLayouting(customLayouting.value)));
    const interactionPanel = createInteractionPanel(backgroundOrderInfo, parentCtx.root, parentCtx.clippingRect, flexState.size, globalMatrix, initializers);
    const handlers = computedHandlers(style, properties, defaultProperties, hoveredSignal, activeSignal);
    const ancestorsHaveListeners = computeAncestorsHaveListeners(undefined, handlers);
    setupPointerEvents(mergedProperties, ancestorsHaveListeners, parentCtx.root, interactionPanel, initializers, false);
    const updateMatrixWorld = computedInheritableProperty(mergedProperties, 'updateMatrixWorld', false);
    setupMatrixWorldUpdate(updateMatrixWorld, false, object, parentCtx.root, globalMatrix, initializers, false);
    setupMatrixWorldUpdate(updateMatrixWorld, false, interactionPanel, parentCtx.root, globalMatrix, initializers, true);
    setupLayoutListeners(style, properties, flexState.size, initializers);
    setupClippedListeners(style, properties, isClipped, initializers);
    return Object.assign(flexState, {
        globalMatrix,
        isClipped,
        isVisible,
        mergedProperties,
        interactionPanel,
        handlers,
        initializers,
    });
}
