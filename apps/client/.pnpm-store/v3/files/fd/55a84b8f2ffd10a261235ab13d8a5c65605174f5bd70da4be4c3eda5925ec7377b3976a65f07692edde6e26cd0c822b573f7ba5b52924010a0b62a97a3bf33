import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useEffect, useMemo, useRef } from 'react';
import { ParentProvider, useParent } from './context.js';
import { AddHandlers, usePropertySignals } from './utils.js';
import { createCustomContainer, initialize, panelGeometry, unsubscribeSubscriptions, } from '@pmndrs/uikit/internals';
import { useComponentInternals } from './ref.js';
export const CustomContainer = forwardRef((properties, ref) => {
    const parent = useParent();
    const outerRef = useRef(null);
    const innerRef = useRef(null);
    const propertySignals = usePropertySignals(properties);
    const internals = useMemo(() => createCustomContainer(parent, propertySignals.style, propertySignals.properties, propertySignals.default, outerRef, innerRef), [parent, propertySignals]);
    useEffect(() => {
        const subscriptions = [];
        initialize(internals.initializers, subscriptions);
        return () => unsubscribeSubscriptions(subscriptions);
    }, [internals]);
    useComponentInternals(ref, parent.root.pixelSize, propertySignals.style, internals, innerRef);
    useEffect(() => {
        if (innerRef.current && properties.name) {
            innerRef.current.name = properties.name;
        }
    }, [properties.name]);
    return (_jsx(AddHandlers, { handlers: internals.handlers, ref: outerRef, children: _jsx(ParentProvider, { value: undefined, children: _jsx("mesh", { ref: innerRef, matrixAutoUpdate: false, geometry: panelGeometry, customDepthMaterial: properties.customDepthMaterial, customDistanceMaterial: properties.customDistanceMaterial, children: properties.children }) }) }));
});
